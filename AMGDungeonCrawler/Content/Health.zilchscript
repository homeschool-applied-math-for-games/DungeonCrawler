class Health : ZilchComponent
{
  [Property] 
  var MaxHealth : Real = 10;
  
  [Property]
  var TimeBetweenAttacks : Real = 2;
  
  var Timer : Real = 0;
  
  var CurrentHealth : Real; 
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    this.Timer = this.TimeBetweenAttacks;
    
    this.CurrentHealth = this.MaxHealth;
    Zero.Connect(this.Owner, Events.CollisionPersisted, this.OnCollisonPersisted);
    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
  }
  
  function OnLogicUpdate (event : UpdateEvent)
  {
    this.Timer -= event.Dt;
  }
  
  function OnCollisonPersisted(event : CollisionEvent)
  {
    this.Damage(event);
  }
  
  function OnCollisionStarted(event : CollisionEvent)
  {
    this.Damage(event);
  }
  
  function Damage(event : CollisionEvent)
  {
    if(this.Owner.Name == "Enemy" && event.OtherObject.Name == "Player")
    {
      return;
    }
    
    if(this.Timer <= 0)
    {
      Console.WriteLine("`this.Owner.Name` was damaged, has `this.CurrentHealth` health.");
      this.CurrentHealth -=1;
      this.Timer = this.TimeBetweenAttacks;
    }
    
    if(this.CurrentHealth == 0)
    {
      if(this.Owner.Name != "Player")
      {
        this.Owner.Destroy();
      }
      else
      {
        this.Owner.Space.ReloadLevel();
      }
    }
  }
}
