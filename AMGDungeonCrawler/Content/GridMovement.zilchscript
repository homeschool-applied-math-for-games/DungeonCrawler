// WARNING! For this script to resolve collisions properly, the collider on the 
// object must be slightly smaller than the space the object actually occupies.

enum FacingDirection
{
  Right,
  Left,
  Up,
  Down,
}

class GridMovement : ZilchComponent
{
  [Dependency]
  var Collider : Collider = null;
  
  [Property]
  var MoveDelay : Real = 0.3;
  
  [Property]
  var Ghost : Boolean = false;
  
  var Timer : Real = 0.0;
  var Direction : FacingDirection = FacingDirection.Right;
  var Dt : Real = 0.0;
  
  function Initialize(init : CogInitializer)
  {
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    this.Dt = event.Dt;
    this.Timer -= event.Dt;
  }
  
  function MoveRight()
  {
    if(this.Timer > 0.0)
    {
      return;
    }
    
    var offset = Real3(1,0,0);
    var translation = this.Owner.Transform.WorldTranslation;
    
    // Verify that destination is valid
    if(!this.CheckMove(offset))
    {
      return;
    }
    
    // Move and update facing direction
    this.Owner.Transform.WorldTranslation = translation + offset;
    this.Direction = FacingDirection.Right;
    this.Timer = this.MoveDelay;
  }
  
  function MoveLeft()
  {
    if(this.Timer > 0.0)
    {
      return;
    }
    
    var offset = Real3(-1,0,0);
    var translation = this.Owner.Transform.WorldTranslation;
    
    // Verify that destination is valid
    if(!this.CheckMove(offset))
    {
      return;
    }
    
    // Move and update facing direction
    this.Owner.Transform.WorldTranslation = translation + offset;
    this.Direction = FacingDirection.Left;
    this.Timer = this.MoveDelay;
  }
  
  function MoveUp()
  {
    if(this.Timer > 0.0)
    {
      return;
    }
    
    var offset = Real3(0,1,0);
    var translation = this.Owner.Transform.WorldTranslation;
    
    // Verify that destination is valid
    if(!this.CheckMove(offset))
    {
      return;
    }
    
    // Move and update facing direction
    this.Owner.Transform.WorldTranslation = translation + offset;
    this.Direction = FacingDirection.Up;
    this.Timer = this.MoveDelay;
  }
  
  function MoveDown()
  {
    if(this.Timer > 0.0)
    {
      return;
    }
    
    var offset = Real3(0,-1,0);
    var translation = this.Owner.Transform.WorldTranslation;
    
    // Verify that destination is valid
    if(!this.CheckMove(offset))
    {
      return;
    }
    
    // Move and update facing direction
    this.Owner.Transform.WorldTranslation = translation + offset;
    this.Direction = FacingDirection.Down;
    this.Timer = this.MoveDelay;
  }
  
  function CheckMove(offset : Real3) : Boolean
  {
    // This object passes through other objects
    if(this.Ghost)
    {
      return true;
    }
    
    var collider = this.Owner.Collider;
    var filter = CastFilter();
    filter.IgnoreCog = this.Owner;
    filter.IgnoreGhost = true;
    filter.IgnoreKinematic = false;
    filter.IgnoreStatic = false;
    filter.IgnoreDynamic = false;
    
    // CastCollider ignores tile map collisions for some reason, but SweepCollider does not
    var results = this.Space.PhysicsSpace.SweepCollider(this.Collider, Math.Normalize(offset), this.Dt, filter);
    
    return results.IsEmpty;
  }
}
